
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00000ede  00000f72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ede  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800196  00800196  00001008  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000101c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050a0  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001943  00000000  00000000  0000632c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c4b  00000000  00000000  00007c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  0000a8bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021f3  00000000  00000000  0000af28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d69  00000000  00000000  0000d11b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000fe84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b8 c0       	rjmp	.+368    	; 0x172 <__ctors_end>
   2:	00 00       	nop
   4:	d3 c0       	rjmp	.+422    	; 0x1ac <__bad_interrupt>
   6:	00 00       	nop
   8:	d1 c0       	rjmp	.+418    	; 0x1ac <__bad_interrupt>
   a:	00 00       	nop
   c:	cf c0       	rjmp	.+414    	; 0x1ac <__bad_interrupt>
   e:	00 00       	nop
  10:	cd c0       	rjmp	.+410    	; 0x1ac <__bad_interrupt>
  12:	00 00       	nop
  14:	cb c0       	rjmp	.+406    	; 0x1ac <__bad_interrupt>
  16:	00 00       	nop
  18:	c9 c0       	rjmp	.+402    	; 0x1ac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c7 c0       	rjmp	.+398    	; 0x1ac <__bad_interrupt>
  1e:	00 00       	nop
  20:	c5 c0       	rjmp	.+394    	; 0x1ac <__bad_interrupt>
  22:	00 00       	nop
  24:	c3 c0       	rjmp	.+390    	; 0x1ac <__bad_interrupt>
  26:	00 00       	nop
  28:	12 c5       	rjmp	.+2596   	; 0xa4e <__vector_10>
  2a:	00 00       	nop
  2c:	bf c0       	rjmp	.+382    	; 0x1ac <__bad_interrupt>
  2e:	00 00       	nop
  30:	bd c0       	rjmp	.+378    	; 0x1ac <__bad_interrupt>
  32:	00 00       	nop
  34:	bb c0       	rjmp	.+374    	; 0x1ac <__bad_interrupt>
  36:	00 00       	nop
  38:	b9 c0       	rjmp	.+370    	; 0x1ac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b7 c0       	rjmp	.+366    	; 0x1ac <__bad_interrupt>
  3e:	00 00       	nop
  40:	b5 c0       	rjmp	.+362    	; 0x1ac <__bad_interrupt>
  42:	00 00       	nop
  44:	b3 c0       	rjmp	.+358    	; 0x1ac <__bad_interrupt>
  46:	00 00       	nop
  48:	b1 c0       	rjmp	.+354    	; 0x1ac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	af c0       	rjmp	.+350    	; 0x1ac <__bad_interrupt>
  4e:	00 00       	nop
  50:	ad c0       	rjmp	.+346    	; 0x1ac <__bad_interrupt>
  52:	00 00       	nop
  54:	ab c0       	rjmp	.+342    	; 0x1ac <__bad_interrupt>
  56:	00 00       	nop
  58:	a9 c0       	rjmp	.+338    	; 0x1ac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a7 c0       	rjmp	.+334    	; 0x1ac <__bad_interrupt>
  5e:	00 00       	nop
  60:	a5 c0       	rjmp	.+330    	; 0x1ac <__bad_interrupt>
  62:	00 00       	nop
  64:	a3 c0       	rjmp	.+326    	; 0x1ac <__bad_interrupt>
  66:	00 00       	nop
  68:	a1 c0       	rjmp	.+322    	; 0x1ac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	9f c0       	rjmp	.+318    	; 0x1ac <__bad_interrupt>
  6e:	00 00       	nop
  70:	9d c0       	rjmp	.+314    	; 0x1ac <__bad_interrupt>
  72:	00 00       	nop
  74:	9b c0       	rjmp	.+310    	; 0x1ac <__bad_interrupt>
  76:	00 00       	nop
  78:	99 c0       	rjmp	.+306    	; 0x1ac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	97 c0       	rjmp	.+302    	; 0x1ac <__bad_interrupt>
  7e:	00 00       	nop
  80:	95 c0       	rjmp	.+298    	; 0x1ac <__bad_interrupt>
  82:	00 00       	nop
  84:	93 c0       	rjmp	.+294    	; 0x1ac <__bad_interrupt>
  86:	00 00       	nop
  88:	91 c0       	rjmp	.+290    	; 0x1ac <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8f c0       	rjmp	.+286    	; 0x1ac <__bad_interrupt>
  8e:	00 00       	nop
  90:	8d c0       	rjmp	.+282    	; 0x1ac <__bad_interrupt>
  92:	00 00       	nop
  94:	8b c0       	rjmp	.+278    	; 0x1ac <__bad_interrupt>
  96:	00 00       	nop

00000098 <ProductString>:
  98:	24 03 50 00 4f 00 4b 00 4b 00 45 00 4e 00 20 00     $.P.O.K.K.E.N. .
  a8:	43 00 4f 00 4e 00 54 00 52 00 4f 00 4c 00 4c 00     C.O.N.T.R.O.L.L.
  b8:	45 00 52 00 00 00                                   E.R...

000000be <ManufacturerString>:
  be:	1c 03 48 00 4f 00 52 00 49 00 20 00 43 00 4f 00     ..H.O.R.I. .C.O.
  ce:	2e 00 2c 00 4c 00 54 00 44 00 2e 00 00 00           ..,.L.T.D.....

000000dc <LanguageString>:
  dc:	04 03 09 04                                         ....

000000e0 <ConfigurationDescriptor>:
  e0:	09 02 29 00 01 01 00 80 fa 09 04 00 00 02 03 00     ..).............
  f0:	00 00 09 21 11 01 00 01 22 56 00 07 05 02 03 40     ...!...."V.....@
 100:	00 05 07 05 81 03 40 00 05                          ......@..

00000109 <DeviceDescriptor>:
 109:	12 01 00 02 00 00 00 40 0d 0f 92 00 00 01 01 02     .......@........
 119:	00 01                                               ..

0000011b <JoystickReport>:
 11b:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
 12b:	95 10 05 09 19 01 29 10 81 02 05 01 25 07 46 3b     ......).....%.F;
 13b:	01 75 04 95 01 65 14 09 39 81 42 65 00 95 01 81     .u...e..9.Be....
 14b:	01 26 ff 00 46 ff 00 09 30 09 31 09 32 09 35 75     .&..F...0.1.2.5u
 15b:	08 95 04 81 02 06 00 ff 09 20 95 01 81 02 0a 21     ......... .....!
 16b:	26 95 08 91 02 c0 00                                &......

00000172 <__ctors_end>:
 172:	11 24       	eor	r1, r1
 174:	1f be       	out	0x3f, r1	; 63
 176:	cf ef       	ldi	r28, 0xFF	; 255
 178:	d0 e2       	ldi	r29, 0x20	; 32
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	cd bf       	out	0x3d, r28	; 61

0000017e <__do_copy_data>:
 17e:	11 e0       	ldi	r17, 0x01	; 1
 180:	a0 e0       	ldi	r26, 0x00	; 0
 182:	b1 e0       	ldi	r27, 0x01	; 1
 184:	ee ed       	ldi	r30, 0xDE	; 222
 186:	fe e0       	ldi	r31, 0x0E	; 14
 188:	00 e0       	ldi	r16, 0x00	; 0
 18a:	0b bf       	out	0x3b, r16	; 59
 18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x14>
 18e:	07 90       	elpm	r0, Z+
 190:	0d 92       	st	X+, r0
 192:	a6 39       	cpi	r26, 0x96	; 150
 194:	b1 07       	cpc	r27, r17
 196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0x10>

00000198 <__do_clear_bss>:
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	a6 e9       	ldi	r26, 0x96	; 150
 19c:	b1 e0       	ldi	r27, 0x01	; 1
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
 1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
 1a2:	aa 3b       	cpi	r26, 0xBA	; 186
 1a4:	b2 07       	cpc	r27, r18
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
 1a8:	d4 d1       	rcall	.+936    	; 0x552 <main>
 1aa:	97 c6       	rjmp	.+3374   	; 0xeda <_exit>

000001ac <__bad_interrupt>:
 1ac:	29 cf       	rjmp	.-430    	; 0x0 <__vectors>

000001ae <SetupHardware>:
}

// Configures hardware and peripherals, such as the USB peripherals.
void SetupHardware(void) {
	// We need to disable watchdog if enabled by bootloader/fuses.
	MCUSR &= ~(1 << WDRF);
 1ae:	84 b7       	in	r24, 0x34	; 52
 1b0:	87 7f       	andi	r24, 0xF7	; 247
 1b2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	a8 95       	wdr
 1ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1be:	88 61       	ori	r24, 0x18	; 24
 1c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1c4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1c8:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 1d6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	// We need to disable clock division before initializing the USB hardware.
	clock_prescale_set(clock_div_1);
	// We can then initialize our hardware and peripherals, including the USB stack.

	// The USB stack should be initialized last.
	USB_Init();
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	1d c4       	rjmp	.+2106   	; 0xa18 <USB_Init>

000001de <EVENT_USB_Device_Connect>:
 1de:	08 95       	ret

000001e0 <EVENT_USB_Device_Disconnect>:
 1e0:	08 95       	ret

000001e2 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 1e2:	42 e3       	ldi	r20, 0x32	; 50
 1e4:	60 ec       	ldi	r22, 0xC0	; 192
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	4b d3       	rcall	.+1686   	; 0x880 <Endpoint_ConfigureEndpoint_Prv>
 1ea:	42 e3       	ldi	r20, 0x32	; 50
 1ec:	61 ec       	ldi	r22, 0xC1	; 193
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	47 c3       	rjmp	.+1678   	; 0x880 <Endpoint_ConfigureEndpoint_Prv>

000001f2 <EVENT_USB_Device_ControlRequest>:

	// We can read ConfigSuccess to indicate a success or failure at this point.
}

// Process control requests sent to the device from the USB host.
void EVENT_USB_Device_ControlRequest(void) {
 1f2:	08 95       	ret

000001f4 <GetNextReport>:
int bufindex = 0;
int duration_count = 0;
int portsval = 0;

// Prepare the next report for the host.
void GetNextReport(USB_JoystickReport_Input_t* const ReportData) {
 1f4:	dc 01       	movw	r26, r24

	// Prepare an empty report
	memset(ReportData, 0, sizeof(USB_JoystickReport_Input_t));
 1f6:	98 e0       	ldi	r25, 0x08	; 8
 1f8:	fd 01       	movw	r30, r26
 1fa:	89 2f       	mov	r24, r25
 1fc:	11 92       	st	Z+, r1
 1fe:	8a 95       	dec	r24
 200:	e9 f7       	brne	.-6      	; 0x1fc <GetNextReport+0x8>
	ReportData->LX = STICK_CENTER;
 202:	80 e8       	ldi	r24, 0x80	; 128
 204:	13 96       	adiw	r26, 0x03	; 3
 206:	8c 93       	st	X, r24
 208:	13 97       	sbiw	r26, 0x03	; 3
	ReportData->LY = STICK_CENTER;
 20a:	14 96       	adiw	r26, 0x04	; 4
 20c:	8c 93       	st	X, r24
 20e:	14 97       	sbiw	r26, 0x04	; 4
	ReportData->RX = STICK_CENTER;
 210:	15 96       	adiw	r26, 0x05	; 5
 212:	8c 93       	st	X, r24
 214:	15 97       	sbiw	r26, 0x05	; 5
	ReportData->RY = STICK_CENTER;
 216:	16 96       	adiw	r26, 0x06	; 6
 218:	8c 93       	st	X, r24
 21a:	16 97       	sbiw	r26, 0x06	; 6
	ReportData->HAT = HAT_CENTER;
 21c:	12 96       	adiw	r26, 0x02	; 2
 21e:	9c 93       	st	X, r25
 220:	12 97       	sbiw	r26, 0x02	; 2

	// Repeat ECHOES times the last report
	if (echoes > 0)
 222:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <echoes>
 226:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <echoes+0x1>
 22a:	18 16       	cp	r1, r24
 22c:	19 06       	cpc	r1, r25
 22e:	6c f4       	brge	.+26     	; 0x24a <GetNextReport+0x56>
	{
		memcpy(ReportData, &last_report, sizeof(USB_JoystickReport_Input_t));
 230:	88 e0       	ldi	r24, 0x08	; 8
 232:	e5 ea       	ldi	r30, 0xA5	; 165
 234:	f1 e0       	ldi	r31, 0x01	; 1
 236:	01 90       	ld	r0, Z+
 238:	0d 92       	st	X+, r0
 23a:	8a 95       	dec	r24
 23c:	e1 f7       	brne	.-8      	; 0x236 <GetNextReport+0x42>
		echoes--;
 23e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <echoes>
 242:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <echoes+0x1>
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	37 c1       	rjmp	.+622    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		return;
	}

	// States and moves management
	switch (state)
 24a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <state>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	c1 f0       	breq	.+48     	; 0x282 <GetNextReport+0x8e>
 252:	68 f4       	brcc	.+26     	; 0x26e <GetNextReport+0x7a>
 254:	88 23       	and	r24, r24
 256:	99 f0       	breq	.+38     	; 0x27e <GetNextReport+0x8a>
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	09 f0       	breq	.+2      	; 0x25e <GetNextReport+0x6a>
 25c:	23 c1       	rjmp	.+582    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		case SYNC_CONTROLLER:
			state = BREATHE;
			break;		
            
        case SYNC_POSITION:
			bufindex = 0;
 25e:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <bufindex+0x1>
 262:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <bufindex>


			ReportData->Button = 0;
 266:	11 96       	adiw	r26, 0x01	; 1
 268:	1c 92       	st	X, r1
 26a:	1e 92       	st	-X, r1
 26c:	08 c0       	rjmp	.+16     	; 0x27e <GetNextReport+0x8a>
		echoes--;
		return;
	}

	// States and moves management
	switch (state)
 26e:	84 30       	cpi	r24, 0x04	; 4
 270:	09 f4       	brne	.+2      	; 0x274 <GetNextReport+0x80>
 272:	15 c1       	rjmp	.+554    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 274:	40 f0       	brcs	.+16     	; 0x286 <GetNextReport+0x92>
 276:	85 30       	cpi	r24, 0x05	; 5
 278:	09 f4       	brne	.+2      	; 0x27c <GetNextReport+0x88>
 27a:	22 c1       	rjmp	.+580    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 27c:	13 c1       	rjmp	.+550    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
			ReportData->RX = STICK_CENTER;
			ReportData->RY = STICK_CENTER;
			ReportData->HAT = HAT_CENTER;


			state = BREATHE;
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	0f c1       	rjmp	.+542    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			break;

		case BREATHE:
			state = PROCESS;
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	0d c1       	rjmp	.+538    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			break;

		case PROCESS:

			switch (step[bufindex].button)
 286:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <bufindex>
 28a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <bufindex+0x1>
 28e:	fc 01       	movw	r30, r24
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	8e 0f       	add	r24, r30
 296:	9f 1f       	adc	r25, r31
 298:	fc 01       	movw	r30, r24
 29a:	e0 50       	subi	r30, 0x00	; 0
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	80 81       	ld	r24, Z
 2a0:	8a 30       	cpi	r24, 0x0A	; 10
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <GetNextReport+0xb2>
 2a4:	7e c0       	rjmp	.+252    	; 0x3a2 <GetNextReport+0x1ae>
 2a6:	48 f5       	brcc	.+82     	; 0x2fa <GetNextReport+0x106>
 2a8:	84 30       	cpi	r24, 0x04	; 4
 2aa:	09 f4       	brne	.+2      	; 0x2ae <GetNextReport+0xba>
 2ac:	67 c0       	rjmp	.+206    	; 0x37c <GetNextReport+0x188>
 2ae:	60 f4       	brcc	.+24     	; 0x2c8 <GetNextReport+0xd4>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <GetNextReport+0xc2>
 2b4:	5a c0       	rjmp	.+180    	; 0x36a <GetNextReport+0x176>
 2b6:	08 f4       	brcc	.+2      	; 0x2ba <GetNextReport+0xc6>
 2b8:	54 c0       	rjmp	.+168    	; 0x362 <GetNextReport+0x16e>
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <GetNextReport+0xcc>
 2be:	5a c0       	rjmp	.+180    	; 0x374 <GetNextReport+0x180>
 2c0:	83 30       	cpi	r24, 0x03	; 3
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <GetNextReport+0xd2>
 2c4:	97 c0       	rjmp	.+302    	; 0x3f4 <GetNextReport+0x200>
 2c6:	a7 c0       	rjmp	.+334    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 2c8:	87 30       	cpi	r24, 0x07	; 7
 2ca:	09 f4       	brne	.+2      	; 0x2ce <GetNextReport+0xda>
 2cc:	60 c0       	rjmp	.+192    	; 0x38e <GetNextReport+0x19a>
 2ce:	50 f4       	brcc	.+20     	; 0x2e4 <GetNextReport+0xf0>
 2d0:	85 30       	cpi	r24, 0x05	; 5
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <GetNextReport+0xe2>
 2d4:	57 c0       	rjmp	.+174    	; 0x384 <GetNextReport+0x190>
 2d6:	86 30       	cpi	r24, 0x06	; 6
 2d8:	09 f0       	breq	.+2      	; 0x2dc <GetNextReport+0xe8>
 2da:	9d c0       	rjmp	.+314    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				case R_DOWN:
					ReportData->RY = STICK_MAX;				
					break;

				case R_LEFT:
					ReportData->RX = STICK_MIN;				
 2dc:	15 96       	adiw	r26, 0x05	; 5
 2de:	1c 92       	st	X, r1
 2e0:	15 97       	sbiw	r26, 0x05	; 5
					break;
 2e2:	99 c0       	rjmp	.+306    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 2e4:	88 30       	cpi	r24, 0x08	; 8
 2e6:	09 f4       	brne	.+2      	; 0x2ea <GetNextReport+0xf6>
 2e8:	57 c0       	rjmp	.+174    	; 0x398 <GetNextReport+0x1a4>
 2ea:	89 30       	cpi	r24, 0x09	; 9
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <GetNextReport+0xfc>
 2ee:	93 c0       	rjmp	.+294    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				case A:
					ReportData->Button |= SWITCH_A;
					break;

				case B:
					ReportData->Button |= SWITCH_B;
 2f0:	8d 91       	ld	r24, X+
 2f2:	9c 91       	ld	r25, X
 2f4:	11 97       	sbiw	r26, 0x01	; 1
 2f6:	82 60       	ori	r24, 0x02	; 2
 2f8:	8b c0       	rjmp	.+278    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 2fa:	80 31       	cpi	r24, 0x10	; 16
 2fc:	09 f4       	brne	.+2      	; 0x300 <GetNextReport+0x10c>
 2fe:	65 c0       	rjmp	.+202    	; 0x3ca <GetNextReport+0x1d6>
 300:	d0 f4       	brcc	.+52     	; 0x336 <GetNextReport+0x142>
 302:	8d 30       	cpi	r24, 0x0D	; 13
 304:	09 f4       	brne	.+2      	; 0x308 <GetNextReport+0x114>
 306:	57 c0       	rjmp	.+174    	; 0x3b6 <GetNextReport+0x1c2>
 308:	58 f4       	brcc	.+22     	; 0x320 <GetNextReport+0x12c>
 30a:	8b 30       	cpi	r24, 0x0B	; 11
 30c:	09 f4       	brne	.+2      	; 0x310 <GetNextReport+0x11c>
 30e:	4e c0       	rjmp	.+156    	; 0x3ac <GetNextReport+0x1b8>
 310:	8c 30       	cpi	r24, 0x0C	; 12
 312:	09 f0       	breq	.+2      	; 0x316 <GetNextReport+0x122>
 314:	80 c0       	rjmp	.+256    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				case X:
					ReportData->Button |= SWITCH_X;
					break;

				case L:
					ReportData->Button |= SWITCH_L;
 316:	8d 91       	ld	r24, X+
 318:	9c 91       	ld	r25, X
 31a:	11 97       	sbiw	r26, 0x01	; 1
 31c:	80 61       	ori	r24, 0x10	; 16
 31e:	78 c0       	rjmp	.+240    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 320:	8e 30       	cpi	r24, 0x0E	; 14
 322:	09 f4       	brne	.+2      	; 0x326 <GetNextReport+0x132>
 324:	4d c0       	rjmp	.+154    	; 0x3c0 <GetNextReport+0x1cc>
 326:	8f 30       	cpi	r24, 0x0F	; 15
 328:	09 f0       	breq	.+2      	; 0x32c <GetNextReport+0x138>
 32a:	75 c0       	rjmp	.+234    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				case ZL:
					ReportData->Button |= SWITCH_ZL;
					break;

				case ZR:
					ReportData->Button |= SWITCH_ZR;
 32c:	8d 91       	ld	r24, X+
 32e:	9c 91       	ld	r25, X
 330:	11 97       	sbiw	r26, 0x01	; 1
 332:	80 68       	ori	r24, 0x80	; 128
 334:	6d c0       	rjmp	.+218    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 336:	83 31       	cpi	r24, 0x13	; 19
 338:	09 f4       	brne	.+2      	; 0x33c <GetNextReport+0x148>
 33a:	61 c0       	rjmp	.+194    	; 0x3fe <GetNextReport+0x20a>
 33c:	38 f4       	brcc	.+14     	; 0x34c <GetNextReport+0x158>
 33e:	81 31       	cpi	r24, 0x11	; 17
 340:	09 f4       	brne	.+2      	; 0x344 <GetNextReport+0x150>
 342:	4a c0       	rjmp	.+148    	; 0x3d8 <GetNextReport+0x1e4>
 344:	82 31       	cpi	r24, 0x12	; 18
 346:	09 f4       	brne	.+2      	; 0x34a <GetNextReport+0x156>
 348:	4e c0       	rjmp	.+156    	; 0x3e6 <GetNextReport+0x1f2>
 34a:	65 c0       	rjmp	.+202    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 34c:	84 31       	cpi	r24, 0x14	; 20
 34e:	09 f4       	brne	.+2      	; 0x352 <GetNextReport+0x15e>
 350:	5b c0       	rjmp	.+182    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 352:	85 31       	cpi	r24, 0x15	; 21
 354:	09 f0       	breq	.+2      	; 0x358 <GetNextReport+0x164>
 356:	5f c0       	rjmp	.+190    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				case SUSPEND:
					ReportData->Button |= SWITCH_ZL | SWITCH_ZR;
					break;

				case SYNC:
					ReportData->Button |= SWITCH_L | SWITCH_R;
 358:	8d 91       	ld	r24, X+
 35a:	9c 91       	ld	r25, X
 35c:	11 97       	sbiw	r26, 0x01	; 1
 35e:	80 63       	ori	r24, 0x30	; 48
 360:	57 c0       	rjmp	.+174    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

			switch (step[bufindex].button)
			{

				case L_UP:
					ReportData->LY = STICK_MIN;				
 362:	14 96       	adiw	r26, 0x04	; 4
 364:	1c 92       	st	X, r1
 366:	14 97       	sbiw	r26, 0x04	; 4
					break;
 368:	56 c0       	rjmp	.+172    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

				case L_DOWN:
					ReportData->LY = STICK_MAX;				
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	14 96       	adiw	r26, 0x04	; 4
 36e:	8c 93       	st	X, r24
 370:	14 97       	sbiw	r26, 0x04	; 4
					break;
 372:	51 c0       	rjmp	.+162    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

				case L_LEFT:
					ReportData->LX = STICK_MIN;				
 374:	13 96       	adiw	r26, 0x03	; 3
 376:	1c 92       	st	X, r1
 378:	13 97       	sbiw	r26, 0x03	; 3
					break;
 37a:	4d c0       	rjmp	.+154    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				case L_RIGHT:
					ReportData->LX = STICK_MAX;				
					break;

				case R_UP:
					ReportData->RY = STICK_MIN;				
 37c:	16 96       	adiw	r26, 0x06	; 6
 37e:	1c 92       	st	X, r1
 380:	16 97       	sbiw	r26, 0x06	; 6
					break;
 382:	49 c0       	rjmp	.+146    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

				case R_DOWN:
					ReportData->RY = STICK_MAX;				
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	16 96       	adiw	r26, 0x06	; 6
 388:	8c 93       	st	X, r24
 38a:	16 97       	sbiw	r26, 0x06	; 6
					break;
 38c:	44 c0       	rjmp	.+136    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				case R_LEFT:
					ReportData->RX = STICK_MIN;				
					break;

				case R_RIGHT:
					ReportData->RX = STICK_MAX;				
 38e:	8f ef       	ldi	r24, 0xFF	; 255
 390:	15 96       	adiw	r26, 0x05	; 5
 392:	8c 93       	st	X, r24
 394:	15 97       	sbiw	r26, 0x05	; 5
					break;
 396:	3f c0       	rjmp	.+126    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
					
				case A:
					ReportData->Button |= SWITCH_A;
 398:	8d 91       	ld	r24, X+
 39a:	9c 91       	ld	r25, X
 39c:	11 97       	sbiw	r26, 0x01	; 1
 39e:	84 60       	ori	r24, 0x04	; 4
 3a0:	37 c0       	rjmp	.+110    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				case B:
					ReportData->Button |= SWITCH_B;
					break;

				case Y:
					ReportData->Button |= SWITCH_Y;
 3a2:	8d 91       	ld	r24, X+
 3a4:	9c 91       	ld	r25, X
 3a6:	11 97       	sbiw	r26, 0x01	; 1
 3a8:	81 60       	ori	r24, 0x01	; 1
 3aa:	32 c0       	rjmp	.+100    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
					break;

				case X:
					ReportData->Button |= SWITCH_X;
 3ac:	8d 91       	ld	r24, X+
 3ae:	9c 91       	ld	r25, X
 3b0:	11 97       	sbiw	r26, 0x01	; 1
 3b2:	88 60       	ori	r24, 0x08	; 8
 3b4:	2d c0       	rjmp	.+90     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				case L:
					ReportData->Button |= SWITCH_L;
					break;

				case R:
					ReportData->Button |= SWITCH_R;
 3b6:	8d 91       	ld	r24, X+
 3b8:	9c 91       	ld	r25, X
 3ba:	11 97       	sbiw	r26, 0x01	; 1
 3bc:	80 62       	ori	r24, 0x20	; 32
 3be:	28 c0       	rjmp	.+80     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
					break;
				
				case ZL:
					ReportData->Button |= SWITCH_ZL;
 3c0:	8d 91       	ld	r24, X+
 3c2:	9c 91       	ld	r25, X
 3c4:	11 97       	sbiw	r26, 0x01	; 1
 3c6:	80 64       	ori	r24, 0x40	; 64
 3c8:	23 c0       	rjmp	.+70     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				case ZR:
					ReportData->Button |= SWITCH_ZR;
					break;

				case MINUS:
					ReportData->Button |= SWITCH_MINUS;
 3ca:	8d 91       	ld	r24, X+
 3cc:	9c 91       	ld	r25, X
 3ce:	11 97       	sbiw	r26, 0x01	; 1
 3d0:	91 60       	ori	r25, 0x01	; 1
 3d2:	11 96       	adiw	r26, 0x01	; 1
 3d4:	9c 93       	st	X, r25
 3d6:	8e 93       	st	-X, r24

                case PLUS:
                    ReportData->Button |= SWITCH_PLUS;
 3d8:	8d 91       	ld	r24, X+
 3da:	9c 91       	ld	r25, X
 3dc:	11 97       	sbiw	r26, 0x01	; 1
 3de:	92 60       	ori	r25, 0x02	; 2
 3e0:	11 96       	adiw	r26, 0x01	; 1
 3e2:	9c 93       	st	X, r25
 3e4:	8e 93       	st	-X, r24

				case SPRINT:
					ReportData->Button |= SWITCH_B;
 3e6:	8d 91       	ld	r24, X+
 3e8:	9c 91       	ld	r25, X
 3ea:	11 97       	sbiw	r26, 0x01	; 1
 3ec:	82 60       	ori	r24, 0x02	; 2
 3ee:	11 96       	adiw	r26, 0x01	; 1
 3f0:	9c 93       	st	X, r25
 3f2:	8e 93       	st	-X, r24
					ReportData->LX = STICK_MAX;
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
 3f6:	13 96       	adiw	r26, 0x03	; 3
 3f8:	8c 93       	st	X, r24
 3fa:	13 97       	sbiw	r26, 0x03	; 3
					break;
 3fc:	0c c0       	rjmp	.+24     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

				case SPRINT_JUMP:
					ReportData->Button |= SWITCH_B | SWITCH_A;
 3fe:	8d 91       	ld	r24, X+
 400:	9c 91       	ld	r25, X
 402:	11 97       	sbiw	r26, 0x01	; 1
 404:	86 60       	ori	r24, 0x06	; 6
 406:	f3 cf       	rjmp	.-26     	; 0x3ee <GetNextReport+0x1fa>
					ReportData->LX = STICK_MAX;
					break;

				case SUSPEND:
					ReportData->Button |= SWITCH_ZL | SWITCH_ZR;
 408:	8d 91       	ld	r24, X+
 40a:	9c 91       	ld	r25, X
 40c:	11 97       	sbiw	r26, 0x01	; 1
 40e:	80 6c       	ori	r24, 0xC0	; 192
					break;

				case SYNC:
					ReportData->Button |= SWITCH_L | SWITCH_R;
 410:	11 96       	adiw	r26, 0x01	; 1
 412:	9c 93       	st	X, r25
 414:	8e 93       	st	-X, r24
					ReportData->RY = STICK_CENTER;
					ReportData->HAT = HAT_CENTER;
					break;
			}

			duration_count++;
 416:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <duration_count>
 41a:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <duration_count+0x1>
 41e:	2f 5f       	subi	r18, 0xFF	; 255
 420:	3f 4f       	sbci	r19, 0xFF	; 255
 422:	30 93 99 01 	sts	0x0199, r19	; 0x800199 <duration_count+0x1>
 426:	20 93 98 01 	sts	0x0198, r18	; 0x800198 <duration_count>

			if (duration_count > step[bufindex].duration)
 42a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <bufindex>
 42e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <bufindex+0x1>
 432:	fc 01       	movw	r30, r24
 434:	ee 0f       	add	r30, r30
 436:	ff 1f       	adc	r31, r31
 438:	e8 0f       	add	r30, r24
 43a:	f9 1f       	adc	r31, r25
 43c:	e0 50       	subi	r30, 0x00	; 0
 43e:	ff 4f       	sbci	r31, 0xFF	; 255
 440:	41 81       	ldd	r20, Z+1	; 0x01
 442:	52 81       	ldd	r21, Z+2	; 0x02
 444:	42 17       	cp	r20, r18
 446:	53 07       	cpc	r21, r19
 448:	48 f4       	brcc	.+18     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			{
				bufindex++;
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <bufindex+0x1>
 450:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <bufindex>
				duration_count = 0;				
 454:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <duration_count+0x1>
 458:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <duration_count>
			}


			if (bufindex > (int)( sizeof(step) / sizeof(step[0])) - 1)
 45c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <bufindex>
 460:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <bufindex+0x1>
 464:	c2 97       	sbiw	r24, 0x32	; 50
 466:	f4 f0       	brlt	.+60     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
			{

				// state = CLEANUP;

				bufindex = 7;
 468:	87 e0       	ldi	r24, 0x07	; 7
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <bufindex+0x1>
 470:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <bufindex>
				duration_count = 0;
 474:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <duration_count+0x1>
 478:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <duration_count>

				state = BREATHE;
 47c:	82 e0       	ldi	r24, 0x02	; 2
 47e:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <state>

				ReportData->LX = STICK_CENTER;
 482:	80 e8       	ldi	r24, 0x80	; 128
 484:	13 96       	adiw	r26, 0x03	; 3
 486:	8c 93       	st	X, r24
 488:	13 97       	sbiw	r26, 0x03	; 3
				ReportData->LY = STICK_CENTER;
 48a:	14 96       	adiw	r26, 0x04	; 4
 48c:	8c 93       	st	X, r24
 48e:	14 97       	sbiw	r26, 0x04	; 4
				ReportData->RX = STICK_CENTER;
 490:	15 96       	adiw	r26, 0x05	; 5
 492:	8c 93       	st	X, r24
 494:	15 97       	sbiw	r26, 0x05	; 5
				ReportData->RY = STICK_CENTER;
 496:	16 96       	adiw	r26, 0x06	; 6
 498:	8c 93       	st	X, r24
 49a:	16 97       	sbiw	r26, 0x06	; 6
 49c:	03 c0       	rjmp	.+6      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
			}

			break;

		case CLEANUP:
			state = DONE;
 49e:	85 e0       	ldi	r24, 0x05	; 5
 4a0:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <state>
	// if (state != SYNC_CONTROLLER && state != SYNC_POSITION)
	// 	if (pgm_read_byte(&(image_data[(xpos / 8) + (ypos * 40)])) & 1 << (xpos % 8))
	// 		ReportData->Button |= SWITCH_A;

	// Prepare to echo this report
	memcpy(&last_report, ReportData, sizeof(USB_JoystickReport_Input_t));
 4a4:	88 e0       	ldi	r24, 0x08	; 8
 4a6:	fd 01       	movw	r30, r26
 4a8:	a5 ea       	ldi	r26, 0xA5	; 165
 4aa:	b1 e0       	ldi	r27, 0x01	; 1
 4ac:	01 90       	ld	r0, Z+
 4ae:	0d 92       	st	X+, r0
 4b0:	8a 95       	dec	r24
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
	echoes = ECHOES;
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <echoes+0x1>
 4bc:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <echoes>
 4c0:	08 95       	ret

000004c2 <HID_Task>:

	// Not used here, it looks like we don't receive control request from the Switch.
}

// Process and deliver data from IN and OUT endpoints.
void HID_Task(void) {
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	28 97       	sbiw	r28, 0x08	; 8
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	f8 94       	cli
 4d0:	de bf       	out	0x3e, r29	; 62
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	cd bf       	out	0x3d, r28	; 61
	// If the device isn't connected and properly configured, we can't do anything here.
	if (USB_DeviceState != DEVICE_STATE_Configured)
 4d6:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <USB_DeviceState>
 4da:	84 30       	cpi	r24, 0x04	; 4
 4dc:	89 f5       	brne	.+98     	; 0x540 <HID_Task+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 4de:	82 e0       	ldi	r24, 0x02	; 2
 4e0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		return;

	// We'll start with the OUT endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_OUT_EPADDR);
	// We'll check to see if we received something on the OUT endpoint.
	if (Endpoint_IsOUTReceived())
 4e8:	82 ff       	sbrs	r24, 2
 4ea:	12 c0       	rjmp	.+36     	; 0x510 <HID_Task+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 4ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		// If we did, and the packet has data, we'll react to it.
		if (Endpoint_IsReadWriteAllowed())
 4f0:	85 ff       	sbrs	r24, 5
 4f2:	09 c0       	rjmp	.+18     	; 0x506 <HID_Task+0x44>
		{
			// We'll create a place to store our data received from the host.
			USB_JoystickReport_Output_t JoystickOutputData;
			// We'll then take in that data, setting it up in our storage.
			while(Endpoint_Read_Stream_LE(&JoystickOutputData, sizeof(JoystickOutputData), NULL) != ENDPOINT_RWSTREAM_NoError);
 4f4:	40 e0       	ldi	r20, 0x00	; 0
 4f6:	50 e0       	ldi	r21, 0x00	; 0
 4f8:	67 e0       	ldi	r22, 0x07	; 7
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	ce 01       	movw	r24, r28
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	b8 d0       	rcall	.+368    	; 0x672 <Endpoint_Read_Stream_LE>
 502:	81 11       	cpse	r24, r1
 504:	f7 cf       	rjmp	.-18     	; 0x4f4 <HID_Task+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 506:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 50a:	8b 77       	andi	r24, 0x7B	; 123
 50c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 516:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	// We'll then move on to the IN endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_IN_EPADDR);
	// We first check to see if the host is ready to accept data.
	if (Endpoint_IsINReady())
 51a:	80 ff       	sbrs	r24, 0
 51c:	11 c0       	rjmp	.+34     	; 0x540 <HID_Task+0x7e>
	{
		// We'll create an empty report.
		USB_JoystickReport_Input_t JoystickInputData;
		// We'll then populate this report with what we want to send to the host.
		GetNextReport(&JoystickInputData);
 51e:	ce 01       	movw	r24, r28
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	68 de       	rcall	.-816    	; 0x1f4 <GetNextReport>
		// Once populated, we can output this data to the host. We do this by first writing the data to the control stream.
		while(Endpoint_Write_Stream_LE(&JoystickInputData, sizeof(JoystickInputData), NULL) != ENDPOINT_RWSTREAM_NoError);
 524:	40 e0       	ldi	r20, 0x00	; 0
 526:	50 e0       	ldi	r21, 0x00	; 0
 528:	68 e0       	ldi	r22, 0x08	; 8
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	ce 01       	movw	r24, r28
 52e:	01 96       	adiw	r24, 0x01	; 1
 530:	56 d0       	rcall	.+172    	; 0x5de <Endpoint_Write_Stream_LE>
 532:	81 11       	cpse	r24, r1
 534:	f7 cf       	rjmp	.-18     	; 0x524 <HID_Task+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 536:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 53a:	8e 77       	andi	r24, 0x7E	; 126
 53c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		// We then send an IN packet on this endpoint.
		Endpoint_ClearIN();
	}
}
 540:	28 96       	adiw	r28, 0x08	; 8
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	f8 94       	cli
 546:	de bf       	out	0x3e, r29	; 62
 548:	0f be       	out	0x3f, r0	; 63
 54a:	cd bf       	out	0x3d, r28	; 61
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <main>:

	
};

// Main entry point.
int main(void) {
 552:	2d de       	rcall	.-934    	; 0x1ae <SetupHardware>
 554:	78 94       	sei
 556:	b5 df       	rcall	.-150    	; 0x4c2 <HID_Task>
 558:	a6 d4       	rcall	.+2380   	; 0xea6 <USB_USBTask>
 55a:	fd cf       	rjmp	.-6      	; 0x556 <main+0x4>

0000055c <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 55c:	29 2f       	mov	r18, r25
 55e:	33 27       	eor	r19, r19
 560:	23 30       	cpi	r18, 0x03	; 3
 562:	31 05       	cpc	r19, r1
 564:	e1 f0       	breq	.+56     	; 0x59e <CALLBACK_USB_GetDescriptor+0x42>
 566:	58 f4       	brcc	.+22     	; 0x57e <CALLBACK_USB_GetDescriptor+0x22>
 568:	21 30       	cpi	r18, 0x01	; 1
 56a:	31 05       	cpc	r19, r1
 56c:	99 f0       	breq	.+38     	; 0x594 <CALLBACK_USB_GetDescriptor+0x38>
 56e:	22 30       	cpi	r18, 0x02	; 2
 570:	31 05       	cpc	r19, r1
 572:	69 f5       	brne	.+90     	; 0x5ce <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 574:	89 e2       	ldi	r24, 0x29	; 41
 576:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 578:	20 ee       	ldi	r18, 0xE0	; 224
 57a:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 57c:	2c c0       	rjmp	.+88     	; 0x5d6 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 57e:	21 32       	cpi	r18, 0x21	; 33
 580:	31 05       	cpc	r19, r1
 582:	01 f1       	breq	.+64     	; 0x5c4 <CALLBACK_USB_GetDescriptor+0x68>
 584:	22 32       	cpi	r18, 0x22	; 34
 586:	31 05       	cpc	r19, r1
 588:	11 f5       	brne	.+68     	; 0x5ce <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
 58a:	86 e5       	ldi	r24, 0x56	; 86
 58c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
 58e:	2b e1       	ldi	r18, 0x1B	; 27
 590:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
 592:	21 c0       	rjmp	.+66     	; 0x5d6 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 594:	82 e1       	ldi	r24, 0x12	; 18
 596:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 598:	29 e0       	ldi	r18, 0x09	; 9
 59a:	31 e0       	ldi	r19, 0x01	; 1
 59c:	1c c0       	rjmp	.+56     	; 0x5d6 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 59e:	99 27       	eor	r25, r25
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	91 05       	cpc	r25, r1
 5a4:	49 f0       	breq	.+18     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0x5c>
 5a6:	28 f0       	brcs	.+10     	; 0x5b2 <CALLBACK_USB_GetDescriptor+0x56>
 5a8:	02 97       	sbiw	r24, 0x02	; 2
 5aa:	89 f4       	brne	.+34     	; 0x5ce <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 5ac:	e8 e9       	ldi	r30, 0x98	; 152
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	05 c0       	rjmp	.+10     	; 0x5bc <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 5b2:	ec ed       	ldi	r30, 0xDC	; 220
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 5b8:	ee eb       	ldi	r30, 0xBE	; 190
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 5bc:	84 91       	lpm	r24, Z
 5be:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 5c0:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 5c2:	09 c0       	rjmp	.+18     	; 0x5d6 <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 5c4:	89 e0       	ldi	r24, 0x09	; 9
 5c6:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
 5c8:	22 ef       	ldi	r18, 0xF2	; 242
 5ca:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <CALLBACK_USB_GetDescriptor+0x7a>
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	90 e0       	ldi	r25, 0x00	; 0
	const void** const DescriptorAddress
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 5d2:	20 e0       	ldi	r18, 0x00	; 0
 5d4:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
 5d6:	fa 01       	movw	r30, r20
 5d8:	31 83       	std	Z+1, r19	; 0x01
 5da:	20 83       	st	Z, r18
	return Size;
}
 5dc:	08 95       	ret

000005de <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5de:	cf 92       	push	r12
 5e0:	df 92       	push	r13
 5e2:	ef 92       	push	r14
 5e4:	ff 92       	push	r15
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	ec 01       	movw	r28, r24
 5f0:	8b 01       	movw	r16, r22
 5f2:	7a 01       	movw	r14, r20
 5f4:	99 d1       	rcall	.+818    	; 0x928 <Endpoint_WaitUntilReady>
 5f6:	81 11       	cpse	r24, r1
 5f8:	33 c0       	rjmp	.+102    	; 0x660 <Endpoint_Write_Stream_LE+0x82>
 5fa:	e1 14       	cp	r14, r1
 5fc:	f1 04       	cpc	r15, r1
 5fe:	39 f0       	breq	.+14     	; 0x60e <Endpoint_Write_Stream_LE+0x30>
 600:	f7 01       	movw	r30, r14
 602:	80 81       	ld	r24, Z
 604:	91 81       	ldd	r25, Z+1	; 0x01
 606:	08 1b       	sub	r16, r24
 608:	19 0b       	sbc	r17, r25
 60a:	c8 0f       	add	r28, r24
 60c:	d9 1f       	adc	r29, r25
 60e:	c1 2c       	mov	r12, r1
 610:	d1 2c       	mov	r13, r1
 612:	01 15       	cp	r16, r1
 614:	11 05       	cpc	r17, r1
 616:	19 f1       	breq	.+70     	; 0x65e <Endpoint_Write_Stream_LE+0x80>
 618:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 61c:	85 fd       	sbrc	r24, 5
 61e:	16 c0       	rjmp	.+44     	; 0x64c <Endpoint_Write_Stream_LE+0x6e>
 620:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 624:	8e 77       	andi	r24, 0x7E	; 126
 626:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 62a:	3d d4       	rcall	.+2170   	; 0xea6 <USB_USBTask>
 62c:	e1 14       	cp	r14, r1
 62e:	f1 04       	cpc	r15, r1
 630:	49 f0       	breq	.+18     	; 0x644 <Endpoint_Write_Stream_LE+0x66>
 632:	f7 01       	movw	r30, r14
 634:	80 81       	ld	r24, Z
 636:	91 81       	ldd	r25, Z+1	; 0x01
 638:	c8 0e       	add	r12, r24
 63a:	d9 1e       	adc	r13, r25
 63c:	d1 82       	std	Z+1, r13	; 0x01
 63e:	c0 82       	st	Z, r12
 640:	85 e0       	ldi	r24, 0x05	; 5
 642:	0e c0       	rjmp	.+28     	; 0x660 <Endpoint_Write_Stream_LE+0x82>
 644:	71 d1       	rcall	.+738    	; 0x928 <Endpoint_WaitUntilReady>
 646:	88 23       	and	r24, r24
 648:	21 f3       	breq	.-56     	; 0x612 <Endpoint_Write_Stream_LE+0x34>
 64a:	0a c0       	rjmp	.+20     	; 0x660 <Endpoint_Write_Stream_LE+0x82>
 64c:	89 91       	ld	r24, Y+
 64e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 652:	01 50       	subi	r16, 0x01	; 1
 654:	11 09       	sbc	r17, r1
 656:	ff ef       	ldi	r31, 0xFF	; 255
 658:	cf 1a       	sub	r12, r31
 65a:	df 0a       	sbc	r13, r31
 65c:	da cf       	rjmp	.-76     	; 0x612 <Endpoint_Write_Stream_LE+0x34>
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	0f 91       	pop	r16
 668:	ff 90       	pop	r15
 66a:	ef 90       	pop	r14
 66c:	df 90       	pop	r13
 66e:	cf 90       	pop	r12
 670:	08 95       	ret

00000672 <Endpoint_Read_Stream_LE>:
 672:	cf 92       	push	r12
 674:	df 92       	push	r13
 676:	ef 92       	push	r14
 678:	ff 92       	push	r15
 67a:	0f 93       	push	r16
 67c:	1f 93       	push	r17
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	ec 01       	movw	r28, r24
 684:	8b 01       	movw	r16, r22
 686:	7a 01       	movw	r14, r20
 688:	4f d1       	rcall	.+670    	; 0x928 <Endpoint_WaitUntilReady>
 68a:	81 11       	cpse	r24, r1
 68c:	33 c0       	rjmp	.+102    	; 0x6f4 <Endpoint_Read_Stream_LE+0x82>
 68e:	e1 14       	cp	r14, r1
 690:	f1 04       	cpc	r15, r1
 692:	39 f0       	breq	.+14     	; 0x6a2 <Endpoint_Read_Stream_LE+0x30>
 694:	f7 01       	movw	r30, r14
 696:	80 81       	ld	r24, Z
 698:	91 81       	ldd	r25, Z+1	; 0x01
 69a:	08 1b       	sub	r16, r24
 69c:	19 0b       	sbc	r17, r25
 69e:	c8 0f       	add	r28, r24
 6a0:	d9 1f       	adc	r29, r25
 6a2:	c1 2c       	mov	r12, r1
 6a4:	d1 2c       	mov	r13, r1
 6a6:	01 15       	cp	r16, r1
 6a8:	11 05       	cpc	r17, r1
 6aa:	19 f1       	breq	.+70     	; 0x6f2 <Endpoint_Read_Stream_LE+0x80>
 6ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6b0:	85 fd       	sbrc	r24, 5
 6b2:	16 c0       	rjmp	.+44     	; 0x6e0 <Endpoint_Read_Stream_LE+0x6e>
 6b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6b8:	8b 77       	andi	r24, 0x7B	; 123
 6ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6be:	f3 d3       	rcall	.+2022   	; 0xea6 <USB_USBTask>
 6c0:	e1 14       	cp	r14, r1
 6c2:	f1 04       	cpc	r15, r1
 6c4:	49 f0       	breq	.+18     	; 0x6d8 <Endpoint_Read_Stream_LE+0x66>
 6c6:	f7 01       	movw	r30, r14
 6c8:	80 81       	ld	r24, Z
 6ca:	91 81       	ldd	r25, Z+1	; 0x01
 6cc:	c8 0e       	add	r12, r24
 6ce:	d9 1e       	adc	r13, r25
 6d0:	d1 82       	std	Z+1, r13	; 0x01
 6d2:	c0 82       	st	Z, r12
 6d4:	85 e0       	ldi	r24, 0x05	; 5
 6d6:	0e c0       	rjmp	.+28     	; 0x6f4 <Endpoint_Read_Stream_LE+0x82>
 6d8:	27 d1       	rcall	.+590    	; 0x928 <Endpoint_WaitUntilReady>
 6da:	88 23       	and	r24, r24
 6dc:	21 f3       	breq	.-56     	; 0x6a6 <Endpoint_Read_Stream_LE+0x34>
 6de:	0a c0       	rjmp	.+20     	; 0x6f4 <Endpoint_Read_Stream_LE+0x82>
 6e0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 6e4:	89 93       	st	Y+, r24
 6e6:	01 50       	subi	r16, 0x01	; 1
 6e8:	11 09       	sbc	r17, r1
 6ea:	ff ef       	ldi	r31, 0xFF	; 255
 6ec:	cf 1a       	sub	r12, r31
 6ee:	df 0a       	sbc	r13, r31
 6f0:	da cf       	rjmp	.-76     	; 0x6a6 <Endpoint_Read_Stream_LE+0x34>
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	df 90       	pop	r13
 702:	cf 90       	pop	r12
 704:	08 95       	ret

00000706 <Endpoint_Write_Control_Stream_LE>:
 706:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <USB_ControlRequest+0x6>
 70a:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <USB_ControlRequest+0x7>
 70e:	26 17       	cp	r18, r22
 710:	37 07       	cpc	r19, r23
 712:	48 f0       	brcs	.+18     	; 0x726 <Endpoint_Write_Control_Stream_LE+0x20>
 714:	61 15       	cp	r22, r1
 716:	71 05       	cpc	r23, r1
 718:	39 f4       	brne	.+14     	; 0x728 <Endpoint_Write_Control_Stream_LE+0x22>
 71a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 71e:	2e 77       	andi	r18, 0x7E	; 126
 720:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 724:	01 c0       	rjmp	.+2      	; 0x728 <Endpoint_Write_Control_Stream_LE+0x22>
 726:	b9 01       	movw	r22, r18
 728:	fc 01       	movw	r30, r24
 72a:	20 e0       	ldi	r18, 0x00	; 0
 72c:	61 15       	cp	r22, r1
 72e:	71 05       	cpc	r23, r1
 730:	71 f1       	breq	.+92     	; 0x78e <Endpoint_Write_Control_Stream_LE+0x88>
 732:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <USB_DeviceState>
 736:	88 23       	and	r24, r24
 738:	e9 f1       	breq	.+122    	; 0x7b4 <Endpoint_Write_Control_Stream_LE+0xae>
 73a:	85 30       	cpi	r24, 0x05	; 5
 73c:	e9 f1       	breq	.+122    	; 0x7b8 <Endpoint_Write_Control_Stream_LE+0xb2>
 73e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 742:	83 fd       	sbrc	r24, 3
 744:	3b c0       	rjmp	.+118    	; 0x7bc <Endpoint_Write_Control_Stream_LE+0xb6>
 746:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 74a:	82 fd       	sbrc	r24, 2
 74c:	2d c0       	rjmp	.+90     	; 0x7a8 <Endpoint_Write_Control_Stream_LE+0xa2>
 74e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 752:	80 ff       	sbrs	r24, 0
 754:	eb cf       	rjmp	.-42     	; 0x72c <Endpoint_Write_Control_Stream_LE+0x26>
 756:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 75a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 75e:	61 15       	cp	r22, r1
 760:	71 05       	cpc	r23, r1
 762:	51 f0       	breq	.+20     	; 0x778 <Endpoint_Write_Control_Stream_LE+0x72>
 764:	80 34       	cpi	r24, 0x40	; 64
 766:	91 05       	cpc	r25, r1
 768:	38 f4       	brcc	.+14     	; 0x778 <Endpoint_Write_Control_Stream_LE+0x72>
 76a:	21 91       	ld	r18, Z+
 76c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 770:	61 50       	subi	r22, 0x01	; 1
 772:	71 09       	sbc	r23, r1
 774:	01 96       	adiw	r24, 0x01	; 1
 776:	f3 cf       	rjmp	.-26     	; 0x75e <Endpoint_Write_Control_Stream_LE+0x58>
 778:	21 e0       	ldi	r18, 0x01	; 1
 77a:	80 34       	cpi	r24, 0x40	; 64
 77c:	91 05       	cpc	r25, r1
 77e:	09 f0       	breq	.+2      	; 0x782 <Endpoint_Write_Control_Stream_LE+0x7c>
 780:	20 e0       	ldi	r18, 0x00	; 0
 782:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 786:	8e 77       	andi	r24, 0x7E	; 126
 788:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 78c:	cf cf       	rjmp	.-98     	; 0x72c <Endpoint_Write_Control_Stream_LE+0x26>
 78e:	21 11       	cpse	r18, r1
 790:	d0 cf       	rjmp	.-96     	; 0x732 <Endpoint_Write_Control_Stream_LE+0x2c>
 792:	0a c0       	rjmp	.+20     	; 0x7a8 <Endpoint_Write_Control_Stream_LE+0xa2>
 794:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <USB_DeviceState>
 798:	88 23       	and	r24, r24
 79a:	61 f0       	breq	.+24     	; 0x7b4 <Endpoint_Write_Control_Stream_LE+0xae>
 79c:	85 30       	cpi	r24, 0x05	; 5
 79e:	61 f0       	breq	.+24     	; 0x7b8 <Endpoint_Write_Control_Stream_LE+0xb2>
 7a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7a4:	83 fd       	sbrc	r24, 3
 7a6:	0a c0       	rjmp	.+20     	; 0x7bc <Endpoint_Write_Control_Stream_LE+0xb6>
 7a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7ac:	82 ff       	sbrs	r24, 2
 7ae:	f2 cf       	rjmp	.-28     	; 0x794 <Endpoint_Write_Control_Stream_LE+0x8e>
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	08 95       	ret
 7b4:	82 e0       	ldi	r24, 0x02	; 2
 7b6:	08 95       	ret
 7b8:	83 e0       	ldi	r24, 0x03	; 3
 7ba:	08 95       	ret
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	08 95       	ret

000007c0 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 7c0:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <USB_ControlRequest+0x6>
 7c4:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <USB_ControlRequest+0x7>
 7c8:	26 17       	cp	r18, r22
 7ca:	37 07       	cpc	r19, r23
 7cc:	48 f0       	brcs	.+18     	; 0x7e0 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 7ce:	61 15       	cp	r22, r1
 7d0:	71 05       	cpc	r23, r1
 7d2:	39 f4       	brne	.+14     	; 0x7e2 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7d4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7d8:	2e 77       	andi	r18, 0x7E	; 126
 7da:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7de:	01 c0       	rjmp	.+2      	; 0x7e2 <Endpoint_Write_Control_PStream_LE+0x22>
 7e0:	b9 01       	movw	r22, r18
 7e2:	fc 01       	movw	r30, r24
 7e4:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7e6:	61 15       	cp	r22, r1
 7e8:	71 05       	cpc	r23, r1
 7ea:	89 f1       	breq	.+98     	; 0x84e <Endpoint_Write_Control_PStream_LE+0x8e>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7ec:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7f0:	88 23       	and	r24, r24
 7f2:	09 f4       	brne	.+2      	; 0x7f6 <Endpoint_Write_Control_PStream_LE+0x36>
 7f4:	3f c0       	rjmp	.+126    	; 0x874 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7f6:	85 30       	cpi	r24, 0x05	; 5
 7f8:	09 f4       	brne	.+2      	; 0x7fc <Endpoint_Write_Control_PStream_LE+0x3c>
 7fa:	3e c0       	rjmp	.+124    	; 0x878 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 7fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 800:	83 fd       	sbrc	r24, 3
 802:	3c c0       	rjmp	.+120    	; 0x87c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 804:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 808:	82 fd       	sbrc	r24, 2
 80a:	2e c0       	rjmp	.+92     	; 0x868 <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 80c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 810:	80 ff       	sbrs	r24, 0
 812:	e9 cf       	rjmp	.-46     	; 0x7e6 <Endpoint_Write_Control_PStream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 814:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 818:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 81c:	61 15       	cp	r22, r1
 81e:	71 05       	cpc	r23, r1
 820:	59 f0       	breq	.+22     	; 0x838 <Endpoint_Write_Control_PStream_LE+0x78>
 822:	80 34       	cpi	r24, 0x40	; 64
 824:	91 05       	cpc	r25, r1
 826:	40 f4       	brcc	.+16     	; 0x838 <Endpoint_Write_Control_PStream_LE+0x78>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 828:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 82a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 82e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 830:	61 50       	subi	r22, 0x01	; 1
 832:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 834:	01 96       	adiw	r24, 0x01	; 1
 836:	f2 cf       	rjmp	.-28     	; 0x81c <Endpoint_Write_Control_PStream_LE+0x5c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 838:	21 e0       	ldi	r18, 0x01	; 1
 83a:	80 34       	cpi	r24, 0x40	; 64
 83c:	91 05       	cpc	r25, r1
 83e:	09 f0       	breq	.+2      	; 0x842 <Endpoint_Write_Control_PStream_LE+0x82>
 840:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 842:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 846:	8e 77       	andi	r24, 0x7E	; 126
 848:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 84c:	cc cf       	rjmp	.-104    	; 0x7e6 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 84e:	21 11       	cpse	r18, r1
 850:	cd cf       	rjmp	.-102    	; 0x7ec <Endpoint_Write_Control_PStream_LE+0x2c>
 852:	0a c0       	rjmp	.+20     	; 0x868 <Endpoint_Write_Control_PStream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 854:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 858:	88 23       	and	r24, r24
 85a:	61 f0       	breq	.+24     	; 0x874 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 85c:	85 30       	cpi	r24, 0x05	; 5
 85e:	61 f0       	breq	.+24     	; 0x878 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 860:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 864:	83 fd       	sbrc	r24, 3
 866:	0a c0       	rjmp	.+20     	; 0x87c <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 868:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 86c:	82 ff       	sbrs	r24, 2
 86e:	f2 cf       	rjmp	.-28     	; 0x854 <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 874:	82 e0       	ldi	r24, 0x02	; 2
 876:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 878:	83 e0       	ldi	r24, 0x03	; 3
 87a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 87c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 87e:	08 95       	ret

00000880 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 880:	98 2f       	mov	r25, r24
 882:	97 30       	cpi	r25, 0x07	; 7
 884:	68 f5       	brcc	.+90     	; 0x8e0 <Endpoint_ConfigureEndpoint_Prv+0x60>
 886:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 88a:	98 17       	cp	r25, r24
 88c:	39 f0       	breq	.+14     	; 0x89c <Endpoint_ConfigureEndpoint_Prv+0x1c>
 88e:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 892:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 896:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 89a:	03 c0       	rjmp	.+6      	; 0x8a2 <Endpoint_ConfigureEndpoint_Prv+0x22>
 89c:	24 2f       	mov	r18, r20
 89e:	76 2f       	mov	r23, r22
 8a0:	50 e0       	ldi	r21, 0x00	; 0
 8a2:	21 fd       	sbrc	r18, 1
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <Endpoint_ConfigureEndpoint_Prv+0x2a>
 8a6:	9f 5f       	subi	r25, 0xFF	; 255
 8a8:	ec cf       	rjmp	.-40     	; 0x882 <Endpoint_ConfigureEndpoint_Prv+0x2>
 8aa:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 8ae:	3e 7f       	andi	r19, 0xFE	; 254
 8b0:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 8b4:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 8b8:	3d 7f       	andi	r19, 0xFD	; 253
 8ba:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 8be:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 8c2:	31 60       	ori	r19, 0x01	; 1
 8c4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 8c8:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 8cc:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 8d0:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 8d4:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 8d8:	27 fd       	sbrc	r18, 7
 8da:	e5 cf       	rjmp	.-54     	; 0x8a6 <Endpoint_ConfigureEndpoint_Prv+0x26>
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	08 95       	ret
 8e0:	8f 70       	andi	r24, 0x0F	; 15
 8e2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	08 95       	ret

000008ea <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 8ea:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <USB_ControlRequest>
 8ee:	87 ff       	sbrs	r24, 7
 8f0:	11 c0       	rjmp	.+34     	; 0x914 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 8f6:	82 fd       	sbrc	r24, 2
 8f8:	05 c0       	rjmp	.+10     	; 0x904 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 8fa:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <USB_DeviceState>
 8fe:	81 11       	cpse	r24, r1
 900:	f8 cf       	rjmp	.-16     	; 0x8f2 <Endpoint_ClearStatusStage+0x8>
 902:	11 c0       	rjmp	.+34     	; 0x926 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 904:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 908:	8b 77       	andi	r24, 0x7B	; 123
 90a:	0b c0       	rjmp	.+22     	; 0x922 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 90c:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <USB_DeviceState>
 910:	88 23       	and	r24, r24
 912:	49 f0       	breq	.+18     	; 0x926 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 914:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 918:	80 ff       	sbrs	r24, 0
 91a:	f8 cf       	rjmp	.-16     	; 0x90c <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 91c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 920:	8e 77       	andi	r24, 0x7E	; 126
 922:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 926:	08 95       	ret

00000928 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 928:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 92c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 930:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 932:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 936:	84 2f       	mov	r24, r20
 938:	81 70       	andi	r24, 0x01	; 1
 93a:	40 ff       	sbrs	r20, 0
 93c:	23 c0       	rjmp	.+70     	; 0x984 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 93e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 942:	80 fd       	sbrc	r24, 0
 944:	1d c0       	rjmp	.+58     	; 0x980 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 946:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 94a:	88 23       	and	r24, r24
 94c:	99 f0       	breq	.+38     	; 0x974 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 94e:	85 30       	cpi	r24, 0x05	; 5
 950:	99 f0       	breq	.+38     	; 0x978 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 952:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 956:	85 fd       	sbrc	r24, 5
 958:	11 c0       	rjmp	.+34     	; 0x97c <Endpoint_WaitUntilReady+0x54>
 95a:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 95e:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 962:	24 17       	cp	r18, r20
 964:	35 07       	cpc	r19, r21
 966:	29 f3       	breq	.-54     	; 0x932 <Endpoint_WaitUntilReady+0xa>
 968:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 96a:	11 f0       	breq	.+4      	; 0x970 <Endpoint_WaitUntilReady+0x48>
 96c:	9a 01       	movw	r18, r20
 96e:	e1 cf       	rjmp	.-62     	; 0x932 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 970:	84 e0       	ldi	r24, 0x04	; 4
 972:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 974:	82 e0       	ldi	r24, 0x02	; 2
 976:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 978:	83 e0       	ldi	r24, 0x03	; 3
 97a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 980:	80 e0       	ldi	r24, 0x00	; 0
 982:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 984:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 988:	42 ff       	sbrs	r20, 2
 98a:	dd cf       	rjmp	.-70     	; 0x946 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 98c:	08 95       	ret

0000098e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 98e:	0f 93       	push	r16
 990:	1f 93       	push	r17
 992:	cf 93       	push	r28
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
 994:	df 93       	push	r29
 996:	4e d0       	rcall	.+156    	; 0xa34 <USB_INT_DisableAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 998:	55 d0       	rcall	.+170    	; 0xa44 <USB_INT_ClearAllInterrupts>
 99a:	c8 ed       	ldi	r28, 0xD8	; 216
 99c:	d0 e0       	ldi	r29, 0x00	; 0
 99e:	88 81       	ld	r24, Y
 9a0:	8f 77       	andi	r24, 0x7F	; 127
				USBCON |=  (1 << USBE);
 9a2:	88 83       	st	Y, r24
 9a4:	88 81       	ld	r24, Y
 9a6:	80 68       	ori	r24, 0x80	; 128
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 9a8:	88 83       	st	Y, r24
 9aa:	88 81       	ld	r24, Y
 9ac:	8f 7d       	andi	r24, 0xDF	; 223

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 9ae:	88 83       	st	Y, r24
 9b0:	e7 ed       	ldi	r30, 0xD7	; 215
 9b2:	f0 e0       	ldi	r31, 0x00	; 0
 9b4:	80 81       	ld	r24, Z
 9b6:	80 68       	ori	r24, 0x80	; 128
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 9b8:	80 83       	st	Z, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 9ba:	19 bc       	out	0x29, r1	; 41
 9bc:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
 9c0:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 9c4:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 9c8:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 9cc:	00 ee       	ldi	r16, 0xE0	; 224
 9ce:	10 e0       	ldi	r17, 0x00	; 0
 9d0:	f8 01       	movw	r30, r16
 9d2:	80 81       	ld	r24, Z
 9d4:	8b 7f       	andi	r24, 0xFB	; 251
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 9d6:	80 83       	st	Z, r24
 9d8:	88 81       	ld	r24, Y
 9da:	81 60       	ori	r24, 0x01	; 1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 9dc:	88 83       	st	Y, r24
 9de:	42 e3       	ldi	r20, 0x32	; 50
 9e0:	60 e0       	ldi	r22, 0x00	; 0
 9e2:	80 e0       	ldi	r24, 0x00	; 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 9e4:	4d df       	rcall	.-358    	; 0x880 <Endpoint_ConfigureEndpoint_Prv>
 9e6:	e1 ee       	ldi	r30, 0xE1	; 225
 9e8:	f0 e0       	ldi	r31, 0x00	; 0
 9ea:	80 81       	ld	r24, Z
 9ec:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 9ee:	80 83       	st	Z, r24
 9f0:	e2 ee       	ldi	r30, 0xE2	; 226
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	80 81       	ld	r24, Z
 9f6:	81 60       	ori	r24, 0x01	; 1
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 9f8:	80 83       	st	Z, r24
 9fa:	80 81       	ld	r24, Z
 9fc:	88 60       	ori	r24, 0x08	; 8
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 9fe:	80 83       	st	Z, r24
 a00:	f8 01       	movw	r30, r16
 a02:	80 81       	ld	r24, Z
 a04:	8e 7f       	andi	r24, 0xFE	; 254

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 a06:	80 83       	st	Z, r24
 a08:	88 81       	ld	r24, Y
 a0a:	80 61       	ori	r24, 0x10	; 16
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 a0c:	88 83       	st	Y, r24
 a0e:	df 91       	pop	r29
 a10:	cf 91       	pop	r28
 a12:	1f 91       	pop	r17
 a14:	0f 91       	pop	r16
 a16:	08 95       	ret

00000a18 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 a18:	e8 ed       	ldi	r30, 0xD8	; 216
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	80 81       	ld	r24, Z
 a1e:	8f 7e       	andi	r24, 0xEF	; 239
 a20:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 a22:	e7 ed       	ldi	r30, 0xD7	; 215
 a24:	f0 e0       	ldi	r31, 0x00	; 0
 a26:	80 81       	ld	r24, Z
 a28:	81 60       	ori	r24, 0x01	; 1
 a2a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <USB_IsInitialized>
 a32:	ad cf       	rjmp	.-166    	; 0x98e <USB_ResetInterface>

00000a34 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 a34:	e8 ed       	ldi	r30, 0xD8	; 216
 a36:	f0 e0       	ldi	r31, 0x00	; 0
 a38:	80 81       	ld	r24, Z
 a3a:	8c 7f       	andi	r24, 0xFC	; 252
 a3c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 a3e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a42:	08 95       	ret

00000a44 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 a44:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 a48:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a4c:	08 95       	ret

00000a4e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 a4e:	1f 92       	push	r1
 a50:	0f 92       	push	r0
 a52:	0f b6       	in	r0, 0x3f	; 63
 a54:	0f 92       	push	r0
 a56:	11 24       	eor	r1, r1
 a58:	0b b6       	in	r0, 0x3b	; 59
 a5a:	0f 92       	push	r0
 a5c:	2f 93       	push	r18
 a5e:	3f 93       	push	r19
 a60:	4f 93       	push	r20
 a62:	5f 93       	push	r21
 a64:	6f 93       	push	r22
 a66:	7f 93       	push	r23
 a68:	8f 93       	push	r24
 a6a:	9f 93       	push	r25
 a6c:	af 93       	push	r26
 a6e:	bf 93       	push	r27
 a70:	ef 93       	push	r30
 a72:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 a74:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 a78:	82 ff       	sbrs	r24, 2
 a7a:	0a c0       	rjmp	.+20     	; 0xa90 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 a7c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a80:	82 ff       	sbrs	r24, 2
 a82:	06 c0       	rjmp	.+12     	; 0xa90 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 a84:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a88:	8b 7f       	andi	r24, 0xFB	; 251
 a8a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 a8e:	0a d2       	rcall	.+1044   	; 0xea4 <USB_Event_Stub>
 a90:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 a94:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 a96:	1d c0       	rjmp	.+58     	; 0xad2 <__vector_10+0x84>
 a98:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 a9c:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 a9e:	19 c0       	rjmp	.+50     	; 0xad2 <__vector_10+0x84>
 aa0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 aa4:	8e 7f       	andi	r24, 0xFE	; 254
 aa6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 aaa:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 aae:	80 ff       	sbrs	r24, 0

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 ab0:	0c c0       	rjmp	.+24     	; 0xaca <__vector_10+0x7c>
 ab2:	84 e1       	ldi	r24, 0x14	; 20
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 ab4:	89 bd       	out	0x29, r24	; 41
 ab6:	86 e1       	ldi	r24, 0x16	; 22
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 ab8:	89 bd       	out	0x29, r24	; 41
 aba:	09 b4       	in	r0, 0x29	; 41
 abc:	00 fe       	sbrs	r0, 0
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 abe:	fd cf       	rjmp	.-6      	; 0xaba <__vector_10+0x6c>
 ac0:	81 e0       	ldi	r24, 0x01	; 1
			EVENT_USB_Device_Connect();
 ac2:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <USB_DeviceState>
 ac6:	8b db       	rcall	.-2282   	; 0x1de <EVENT_USB_Device_Connect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__vector_10+0x84>
			EVENT_USB_Device_Disconnect();
 aca:	19 bc       	out	0x29, r1	; 41
 acc:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <USB_DeviceState>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 ad0:	87 db       	rcall	.-2290   	; 0x1e0 <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 ad2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 ad6:	80 ff       	sbrs	r24, 0
 ad8:	18 c0       	rjmp	.+48     	; 0xb0a <__vector_10+0xbc>
 ada:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 ade:	80 ff       	sbrs	r24, 0
 ae0:	14 c0       	rjmp	.+40     	; 0xb0a <__vector_10+0xbc>
 ae2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 ae6:	8e 7f       	andi	r24, 0xFE	; 254
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 ae8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 aec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 af0:	80 61       	ori	r24, 0x10	; 16
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 af2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 af6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 afa:	80 62       	ori	r24, 0x20	; 32

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 afc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		EVENT_USB_Device_Suspend();
 b00:	19 bc       	out	0x29, r1	; 41
 b02:	85 e0       	ldi	r24, 0x05	; 5
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 b04:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <USB_DeviceState>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 b08:	cd d1       	rcall	.+922    	; 0xea4 <USB_Event_Stub>
 b0a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 b0e:	84 ff       	sbrs	r24, 4
 b10:	2f c0       	rjmp	.+94     	; 0xb70 <__vector_10+0x122>
 b12:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 b16:	84 ff       	sbrs	r24, 4
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 b18:	2b c0       	rjmp	.+86     	; 0xb70 <__vector_10+0x122>
 b1a:	84 e1       	ldi	r24, 0x14	; 20
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 b1c:	89 bd       	out	0x29, r24	; 41
 b1e:	86 e1       	ldi	r24, 0x16	; 22
 b20:	89 bd       	out	0x29, r24	; 41
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 b22:	09 b4       	in	r0, 0x29	; 41
 b24:	00 fe       	sbrs	r0, 0
 b26:	fd cf       	rjmp	.-6      	; 0xb22 <__vector_10+0xd4>
 b28:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 b2c:	8f 7d       	andi	r24, 0xDF	; 223
 b2e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 b32:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 b36:	8f 7e       	andi	r24, 0xEF	; 239
 b38:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 b3c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 b40:	8f 7e       	andi	r24, 0xEF	; 239
 b42:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b46:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 b4a:	81 60       	ori	r24, 0x01	; 1
 b4c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b50:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <USB_Device_ConfigurationNumber>
		  USB_DeviceState = DEVICE_STATE_Configured;
 b54:	88 23       	and	r24, r24
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b56:	11 f0       	breq	.+4      	; 0xb5c <__vector_10+0x10e>
 b58:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 b5a:	07 c0       	rjmp	.+14     	; 0xb6a <__vector_10+0x11c>
 b5c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 b60:	87 fd       	sbrc	r24, 7
 b62:	02 c0       	rjmp	.+4      	; 0xb68 <__vector_10+0x11a>
 b64:	81 e0       	ldi	r24, 0x01	; 1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 b66:	01 c0       	rjmp	.+2      	; 0xb6a <__vector_10+0x11c>
 b68:	83 e0       	ldi	r24, 0x03	; 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 b6a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <USB_DeviceState>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 b6e:	9a d1       	rcall	.+820    	; 0xea4 <USB_Event_Stub>
 b70:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 b74:	83 ff       	sbrs	r24, 3
 b76:	22 c0       	rjmp	.+68     	; 0xbbc <__vector_10+0x16e>
 b78:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 b7c:	83 ff       	sbrs	r24, 3
 b7e:	1e c0       	rjmp	.+60     	; 0xbbc <__vector_10+0x16e>
 b80:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 b84:	87 7f       	andi	r24, 0xF7	; 247
 b86:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		USB_Device_ConfigurationNumber = 0;
 b8a:	82 e0       	ldi	r24, 0x02	; 2
 b8c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <USB_DeviceState>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 b90:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <USB_Device_ConfigurationNumber>
 b94:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 b98:	8e 7f       	andi	r24, 0xFE	; 254
 b9a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 b9e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 ba2:	8e 7f       	andi	r24, 0xFE	; 254
 ba4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 ba8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 bac:	80 61       	ori	r24, 0x10	; 16
 bae:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 bb2:	42 e3       	ldi	r20, 0x32	; 50
 bb4:	60 e0       	ldi	r22, 0x00	; 0
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 bb6:	80 e0       	ldi	r24, 0x00	; 0
 bb8:	63 de       	rcall	.-826    	; 0x880 <Endpoint_ConfigureEndpoint_Prv>
 bba:	74 d1       	rcall	.+744    	; 0xea4 <USB_Event_Stub>
 bbc:	ff 91       	pop	r31
 bbe:	ef 91       	pop	r30
 bc0:	bf 91       	pop	r27
 bc2:	af 91       	pop	r26
 bc4:	9f 91       	pop	r25
 bc6:	8f 91       	pop	r24
 bc8:	7f 91       	pop	r23
 bca:	6f 91       	pop	r22
 bcc:	5f 91       	pop	r21
 bce:	4f 91       	pop	r20
 bd0:	3f 91       	pop	r19
 bd2:	2f 91       	pop	r18
 bd4:	0f 90       	pop	r0
 bd6:	0b be       	out	0x3b, r0	; 59
 bd8:	0f 90       	pop	r0
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	0f 90       	pop	r0
 bde:	1f 90       	pop	r1
 be0:	18 95       	reti

00000be2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 be2:	1f 93       	push	r17
 be4:	cf 93       	push	r28
 be6:	df 93       	push	r29
 be8:	cd b7       	in	r28, 0x3d	; 61
 bea:	de b7       	in	r29, 0x3e	; 62
 bec:	aa 97       	sbiw	r28, 0x2a	; 42
 bee:	0f b6       	in	r0, 0x3f	; 63
 bf0:	f8 94       	cli
 bf2:	de bf       	out	0x3e, r29	; 62
 bf4:	0f be       	out	0x3f, r0	; 63
 bf6:	cd bf       	out	0x3d, r28	; 61
 bf8:	e2 eb       	ldi	r30, 0xB2	; 178
 bfa:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 bfc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 c00:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 c02:	21 e0       	ldi	r18, 0x01	; 1
 c04:	ea 3b       	cpi	r30, 0xBA	; 186
 c06:	f2 07       	cpc	r31, r18
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 c08:	c9 f7       	brne	.-14     	; 0xbfc <USB_Device_ProcessControlRequest+0x1a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c0a:	f3 da       	rcall	.-2586   	; 0x1f2 <EVENT_USB_Device_ControlRequest>
 c0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 c10:	83 ff       	sbrs	r24, 3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 c12:	30 c1       	rjmp	.+608    	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 c14:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 c18:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <USB_ControlRequest+0x1>
 c1c:	95 30       	cpi	r25, 0x05	; 5
 c1e:	09 f4       	brne	.+2      	; 0xc22 <USB_Device_ProcessControlRequest+0x40>
 c20:	83 c0       	rjmp	.+262    	; 0xd28 <USB_Device_ProcessControlRequest+0x146>
 c22:	30 f4       	brcc	.+12     	; 0xc30 <USB_Device_ProcessControlRequest+0x4e>
 c24:	91 30       	cpi	r25, 0x01	; 1
 c26:	a9 f1       	breq	.+106    	; 0xc92 <USB_Device_ProcessControlRequest+0xb0>
 c28:	68 f0       	brcs	.+26     	; 0xc44 <USB_Device_ProcessControlRequest+0x62>
 c2a:	93 30       	cpi	r25, 0x03	; 3
 c2c:	91 f1       	breq	.+100    	; 0xc92 <USB_Device_ProcessControlRequest+0xb0>
 c2e:	22 c1       	rjmp	.+580    	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 c30:	98 30       	cpi	r25, 0x08	; 8
 c32:	09 f4       	brne	.+2      	; 0xc36 <USB_Device_ProcessControlRequest+0x54>
 c34:	ef c0       	rjmp	.+478    	; 0xe14 <USB_Device_ProcessControlRequest+0x232>
 c36:	99 30       	cpi	r25, 0x09	; 9
 c38:	09 f4       	brne	.+2      	; 0xc3c <USB_Device_ProcessControlRequest+0x5a>
 c3a:	fb c0       	rjmp	.+502    	; 0xe32 <USB_Device_ProcessControlRequest+0x250>
 c3c:	96 30       	cpi	r25, 0x06	; 6
 c3e:	09 f0       	breq	.+2      	; 0xc42 <USB_Device_ProcessControlRequest+0x60>
 c40:	19 c1       	rjmp	.+562    	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c42:	94 c0       	rjmp	.+296    	; 0xd6c <USB_Device_ProcessControlRequest+0x18a>
 c44:	80 38       	cpi	r24, 0x80	; 128
 c46:	21 f0       	breq	.+8      	; 0xc50 <USB_Device_ProcessControlRequest+0x6e>
 c48:	82 38       	cpi	r24, 0x82	; 130
 c4a:	09 f0       	breq	.+2      	; 0xc4e <USB_Device_ProcessControlRequest+0x6c>
 c4c:	13 c1       	rjmp	.+550    	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 c4e:	08 c0       	rjmp	.+16     	; 0xc60 <USB_Device_ProcessControlRequest+0x7e>
 c50:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 c54:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <USB_Device_RemoteWakeupEnabled>
 c58:	99 23       	and	r25, r25
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 c5a:	89 f0       	breq	.+34     	; 0xc7e <USB_Device_ProcessControlRequest+0x9c>
 c5c:	82 60       	ori	r24, 0x02	; 2
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 c5e:	0f c0       	rjmp	.+30     	; 0xc7e <USB_Device_ProcessControlRequest+0x9c>
 c60:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <USB_ControlRequest+0x4>

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 c64:	8f 70       	andi	r24, 0x0F	; 15
 c66:	87 30       	cpi	r24, 0x07	; 7
 c68:	08 f0       	brcs	.+2      	; 0xc6c <USB_Device_ProcessControlRequest+0x8a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c6a:	04 c1       	rjmp	.+520    	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 c6c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 c70:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
 c74:	85 fb       	bst	r24, 5
 c76:	88 27       	eor	r24, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c78:	80 f9       	bld	r24, 0
 c7a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c7e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c82:	97 7f       	andi	r25, 0xF7	; 247
 c84:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 c88:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 c8c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c90:	cc c0       	rjmp	.+408    	; 0xe2a <USB_Device_ProcessControlRequest+0x248>
 c92:	28 2f       	mov	r18, r24
 c94:	2d 7f       	andi	r18, 0xFD	; 253
 c96:	09 f0       	breq	.+2      	; 0xc9a <USB_Device_ProcessControlRequest+0xb8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 c98:	ed c0       	rjmp	.+474    	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 c9a:	88 23       	and	r24, r24
 c9c:	19 f0       	breq	.+6      	; 0xca4 <USB_Device_ProcessControlRequest+0xc2>
 c9e:	82 30       	cpi	r24, 0x02	; 2
 ca0:	61 f0       	breq	.+24     	; 0xcba <USB_Device_ProcessControlRequest+0xd8>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 ca2:	e8 c0       	rjmp	.+464    	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 ca4:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <USB_ControlRequest+0x2>
 ca8:	81 30       	cpi	r24, 0x01	; 1
 caa:	09 f0       	breq	.+2      	; 0xcae <USB_Device_ProcessControlRequest+0xcc>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 cac:	e3 c0       	rjmp	.+454    	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 cae:	93 30       	cpi	r25, 0x03	; 3
 cb0:	09 f0       	breq	.+2      	; 0xcb4 <USB_Device_ProcessControlRequest+0xd2>
 cb2:	80 e0       	ldi	r24, 0x00	; 0
 cb4:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <USB_Device_RemoteWakeupEnabled>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 cb8:	2e c0       	rjmp	.+92     	; 0xd16 <USB_Device_ProcessControlRequest+0x134>
 cba:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <USB_ControlRequest+0x2>
 cbe:	81 11       	cpse	r24, r1
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 cc0:	2a c0       	rjmp	.+84     	; 0xd16 <USB_Device_ProcessControlRequest+0x134>
 cc2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <USB_ControlRequest+0x4>

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 cc6:	8f 70       	andi	r24, 0x0F	; 15
 cc8:	2f ef       	ldi	r18, 0xFF	; 255
 cca:	28 0f       	add	r18, r24
 ccc:	26 30       	cpi	r18, 0x06	; 6
 cce:	08 f0       	brcs	.+2      	; 0xcd2 <USB_Device_ProcessControlRequest+0xf0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cd0:	d1 c0       	rjmp	.+418    	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 cd2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 cd6:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 cda:	20 ff       	sbrs	r18, 0
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 cdc:	1c c0       	rjmp	.+56     	; 0xd16 <USB_Device_ProcessControlRequest+0x134>
 cde:	93 30       	cpi	r25, 0x03	; 3
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ce0:	21 f4       	brne	.+8      	; 0xcea <USB_Device_ProcessControlRequest+0x108>
 ce2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 ce6:	80 62       	ori	r24, 0x20	; 32
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 ce8:	14 c0       	rjmp	.+40     	; 0xd12 <USB_Device_ProcessControlRequest+0x130>
 cea:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 cee:	90 61       	ori	r25, 0x10	; 16
 cf0:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 cf4:	21 e0       	ldi	r18, 0x01	; 1
 cf6:	30 e0       	ldi	r19, 0x00	; 0
 cf8:	a9 01       	movw	r20, r18
 cfa:	02 c0       	rjmp	.+4      	; 0xd00 <USB_Device_ProcessControlRequest+0x11e>
 cfc:	44 0f       	add	r20, r20
 cfe:	55 1f       	adc	r21, r21
 d00:	8a 95       	dec	r24
 d02:	e2 f7       	brpl	.-8      	; 0xcfc <USB_Device_ProcessControlRequest+0x11a>
 d04:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 d08:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 d0c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 d10:	88 60       	ori	r24, 0x08	; 8
 d12:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d16:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d1e:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 d20:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d24:	e2 dd       	rcall	.-1084   	; 0x8ea <Endpoint_ClearStatusStage>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d26:	a6 c0       	rjmp	.+332    	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 d28:	81 11       	cpse	r24, r1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 d2a:	a4 c0       	rjmp	.+328    	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 d2c:	10 91 b4 01 	lds	r17, 0x01B4	; 0x8001b4 <USB_ControlRequest+0x2>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 d30:	1f 77       	andi	r17, 0x7F	; 127
 d32:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 d36:	80 78       	andi	r24, 0x80	; 128
 d38:	81 2b       	or	r24, r17
 d3a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 d3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d42:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 d44:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d48:	d0 dd       	rcall	.-1120   	; 0x8ea <Endpoint_ClearStatusStage>
 d4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 d4e:	80 ff       	sbrs	r24, 0
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 d50:	fc cf       	rjmp	.-8      	; 0xd4a <USB_Device_ProcessControlRequest+0x168>
 d52:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 d56:	80 68       	ori	r24, 0x80	; 128
 d58:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 d5c:	11 11       	cpse	r17, r1
 d5e:	02 c0       	rjmp	.+4      	; 0xd64 <USB_Device_ProcessControlRequest+0x182>
 d60:	82 e0       	ldi	r24, 0x02	; 2
 d62:	01 c0       	rjmp	.+2      	; 0xd66 <USB_Device_ProcessControlRequest+0x184>
 d64:	83 e0       	ldi	r24, 0x03	; 3
 d66:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <USB_DeviceState>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 d6a:	84 c0       	rjmp	.+264    	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 d6c:	80 58       	subi	r24, 0x80	; 128
 d6e:	82 30       	cpi	r24, 0x02	; 2
 d70:	08 f0       	brcs	.+2      	; 0xd74 <USB_Device_ProcessControlRequest+0x192>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 d72:	80 c0       	rjmp	.+256    	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 d74:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <USB_ControlRequest+0x2>
 d78:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <USB_ControlRequest+0x3>
 d7c:	8c 3d       	cpi	r24, 0xDC	; 220
 d7e:	53 e0       	ldi	r21, 0x03	; 3
 d80:	95 07       	cpc	r25, r21
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 d82:	71 f5       	brne	.+92     	; 0xde0 <USB_Device_ProcessControlRequest+0x1fe>
 d84:	83 e0       	ldi	r24, 0x03	; 3
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 d86:	8a 83       	std	Y+2, r24	; 0x02
 d88:	8a e2       	ldi	r24, 0x2A	; 42
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 d8a:	89 83       	std	Y+1, r24	; 0x01
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 d8c:	4f b7       	in	r20, 0x3f	; 63
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 d8e:	f8 94       	cli
 d90:	de 01       	movw	r26, r28
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d92:	13 96       	adiw	r26, 0x03	; 3
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 d94:	20 e0       	ldi	r18, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 d96:	3e e0       	ldi	r19, 0x0E	; 14
 d98:	51 e2       	ldi	r21, 0x21	; 33
 d9a:	e3 2f       	mov	r30, r19
 d9c:	f0 e0       	ldi	r31, 0x00	; 0
 d9e:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>

					if (SerialCharNum & 0x01)
 da2:	e4 91       	lpm	r30, Z
 da4:	20 ff       	sbrs	r18, 0
					{
						SerialByte >>= 4;
 da6:	03 c0       	rjmp	.+6      	; 0xdae <USB_Device_ProcessControlRequest+0x1cc>
 da8:	e2 95       	swap	r30
						SigReadAddress++;
 daa:	ef 70       	andi	r30, 0x0F	; 15
					}

					SerialByte &= 0x0F;
 dac:	3f 5f       	subi	r19, 0xFF	; 255
 dae:	ef 70       	andi	r30, 0x0F	; 15
 db0:	8e 2f       	mov	r24, r30

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	ea 30       	cpi	r30, 0x0A	; 10
 db6:	10 f0       	brcs	.+4      	; 0xdbc <USB_Device_ProcessControlRequest+0x1da>
 db8:	c7 96       	adiw	r24, 0x37	; 55
 dba:	01 c0       	rjmp	.+2      	; 0xdbe <USB_Device_ProcessControlRequest+0x1dc>
 dbc:	c0 96       	adiw	r24, 0x30	; 48
 dbe:	8d 93       	st	X+, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 dc0:	9d 93       	st	X+, r25
 dc2:	2f 5f       	subi	r18, 0xFF	; 255
 dc4:	24 31       	cpi	r18, 0x14	; 20
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 dc6:	49 f7       	brne	.-46     	; 0xd9a <USB_Device_ProcessControlRequest+0x1b8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dc8:	4f bf       	out	0x3f, r20	; 63
 dca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 dce:	87 7f       	andi	r24, 0xF7	; 247
 dd0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 dd4:	6a e2       	ldi	r22, 0x2A	; 42
 dd6:	70 e0       	ldi	r23, 0x00	; 0
 dd8:	ce 01       	movw	r24, r28
 dda:	01 96       	adiw	r24, 0x01	; 1
 ddc:	94 dc       	rcall	.-1752   	; 0x706 <Endpoint_Write_Control_Stream_LE>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 dde:	14 c0       	rjmp	.+40     	; 0xe08 <USB_Device_ProcessControlRequest+0x226>
 de0:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <USB_ControlRequest+0x4>
 de4:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <USB_ControlRequest+0x5>
 de8:	ae 01       	movw	r20, r28
 dea:	4f 5f       	subi	r20, 0xFF	; 255
 dec:	5f 4f       	sbci	r21, 0xFF	; 255
 dee:	b6 db       	rcall	.-2196   	; 0x55c <CALLBACK_USB_GetDescriptor>
 df0:	bc 01       	movw	r22, r24
 df2:	89 2b       	or	r24, r25
 df4:	09 f4       	brne	.+2      	; 0xdf8 <USB_Device_ProcessControlRequest+0x216>
 df6:	3e c0       	rjmp	.+124    	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 df8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 dfc:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 dfe:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e02:	89 81       	ldd	r24, Y+1	; 0x01
 e04:	9a 81       	ldd	r25, Y+2	; 0x02
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e06:	dc dc       	rcall	.-1608   	; 0x7c0 <Endpoint_Write_Control_PStream_LE>
 e08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e0c:	8b 77       	andi	r24, 0x7B	; 123
 e0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 e12:	30 c0       	rjmp	.+96     	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 e14:	80 38       	cpi	r24, 0x80	; 128
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e16:	71 f5       	brne	.+92     	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 e18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e1c:	87 7f       	andi	r24, 0xF7	; 247
 e1e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 e22:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 e26:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e2e:	8e 77       	andi	r24, 0x7E	; 126
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 e30:	77 cf       	rjmp	.-274    	; 0xd20 <USB_Device_ProcessControlRequest+0x13e>
 e32:	81 11       	cpse	r24, r1
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 e34:	1f c0       	rjmp	.+62     	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 e36:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <USB_ControlRequest+0x2>
 e3a:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <USB_ControlRequest+0x3>
 e3e:	99 27       	eor	r25, r25
 e40:	02 97       	sbiw	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e42:	c4 f4       	brge	.+48     	; 0xe74 <USB_Device_ProcessControlRequest+0x292>
 e44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e48:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 e4a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e4e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <USB_ControlRequest+0x2>

	Endpoint_ClearStatusStage();
 e52:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <USB_Device_ConfigurationNumber>

	if (USB_Device_ConfigurationNumber)
 e56:	49 dd       	rcall	.-1390   	; 0x8ea <Endpoint_ClearStatusStage>
 e58:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <USB_Device_ConfigurationNumber>
 e5c:	81 11       	cpse	r24, r1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 e5e:	06 c0       	rjmp	.+12     	; 0xe6c <USB_Device_ProcessControlRequest+0x28a>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 e60:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 e64:	87 fd       	sbrc	r24, 7
 e66:	02 c0       	rjmp	.+4      	; 0xe6c <USB_Device_ProcessControlRequest+0x28a>
 e68:	81 e0       	ldi	r24, 0x01	; 1
 e6a:	01 c0       	rjmp	.+2      	; 0xe6e <USB_Device_ProcessControlRequest+0x28c>

	EVENT_USB_Device_ConfigurationChanged();
 e6c:	84 e0       	ldi	r24, 0x04	; 4
 e6e:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <USB_DeviceState>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e72:	b7 d9       	rcall	.-3218   	; 0x1e2 <EVENT_USB_Device_ConfigurationChanged>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 e74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e78:	83 ff       	sbrs	r24, 3
 e7a:	0a c0       	rjmp	.+20     	; 0xe90 <USB_Device_ProcessControlRequest+0x2ae>
 e7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e80:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 e82:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e86:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 e8a:	80 62       	ori	r24, 0x20	; 32
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 e8c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 e90:	aa 96       	adiw	r28, 0x2a	; 42
 e92:	0f b6       	in	r0, 0x3f	; 63
 e94:	f8 94       	cli
 e96:	de bf       	out	0x3e, r29	; 62
 e98:	0f be       	out	0x3f, r0	; 63
 e9a:	cd bf       	out	0x3d, r28	; 61
 e9c:	df 91       	pop	r29
 e9e:	cf 91       	pop	r28
 ea0:	1f 91       	pop	r17
 ea2:	08 95       	ret

00000ea4 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 ea4:	08 95       	ret

00000ea6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 ea6:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 ea8:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <USB_DeviceState>
 eac:	88 23       	and	r24, r24
 eae:	99 f0       	breq	.+38     	; 0xed6 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 eb0:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 eb4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 eb6:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 eba:	89 2f       	mov	r24, r25
 ebc:	81 70       	andi	r24, 0x01	; 1
 ebe:	90 fd       	sbrc	r25, 0
 ec0:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 ec2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ec4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ec8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
 ecc:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ece:	89 de       	rcall	.-750    	; 0xbe2 <USB_Device_ProcessControlRequest>
 ed0:	cf 70       	andi	r28, 0x0F	; 15
 ed2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 ed6:	cf 91       	pop	r28
 ed8:	08 95       	ret

00000eda <_exit>:
 eda:	f8 94       	cli

00000edc <__stop_program>:
 edc:	ff cf       	rjmp	.-2      	; 0xedc <__stop_program>
